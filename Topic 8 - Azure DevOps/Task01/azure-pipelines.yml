trigger:
- main

pool:
  name: MyDebianPool
  demands:
    - agent.name -equals mon01

variables:
  - group: "shomeniuk_vargroup"  # Must include variable: storageAccountName

stages:
- stage: Plan
  displayName: 'Terraform Plan'
  jobs:
  - job: TerraformPlan
    displayName: 'Terraform Plan'
    steps:
    # Debug: Verify directory structure
    - script: |
        echo "Root directory:"
        ls -la $(System.DefaultWorkingDirectory)
        echo "Terraform directory:"
        ls -la $(System.DefaultWorkingDirectory)/terraform-pipeline-task01
      displayName: 'Verify Directory Structure'

    # Install unzip if not present
    - script: |
        sudo apt-get update && sudo apt-get install -y unzip
      displayName: 'Install unzip'
      workingDirectory: $(System.DefaultWorkingDirectory)/terraform-pipeline-task01

    # Install Terraform
    - script: |
        #!/bin/bash
        set -euo pipefail
        TERRAFORM_VERSION="1.3.0"
        echo "Downloading Terraform version ${TERRAFORM_VERSION}..."
        curl -fsSL "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip" -o terraform.zip
        unzip terraform.zip
        sudo mv terraform /usr/local/bin/
        rm terraform.zip
        terraform version
      displayName: 'Install Terraform'
      workingDirectory: $(System.DefaultWorkingDirectory)/terraform-pipeline-task01

    # Azure CLI Login using the Service Connection
    - task: AzureCLI@2
      displayName: 'Azure Login'
      inputs:
        azureSubscription: 'shomenniuk-connect'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az account show

    # Initialize Terraform with backend config override
    - script: |
        terraform init \
          -backend-config="storage_account_name=$(storageAccountName)"
      displayName: 'Terraform Init'
      workingDirectory: $(System.DefaultWorkingDirectory)/terraform-pipeline-task01

    # Run Terraform plan (without explicit credentials)
    - script: |
        terraform plan -out=tfplan -input=false 
      displayName: 'Terraform Plan'
      workingDirectory: $(System.DefaultWorkingDirectory)/terraform-pipeline-task01

    # Publish the tfplan artifact for use in the Deploy stage
    - publish: $(System.DefaultWorkingDirectory)/terraform-pipeline-task01/tfplan
      artifact: tfplan
      displayName: 'Publish tfplan artifact'

- stage: Deploy
  displayName: 'Terraform Apply'
  dependsOn: Plan
  condition: succeeded()
  jobs:
  - job: TerraformApply
    displayName: 'Terraform Apply'
    steps:
    # Install unzip on the deploy agent
    - script: |
        sudo apt-get update && sudo apt-get install -y unzip
      displayName: 'Install unzip'
      workingDirectory: $(System.DefaultWorkingDirectory)/terraform-pipeline-task01

    # Re-install Terraform on the deploy agent
    - script: |
        #!/bin/bash
        set -euo pipefail
        TERRAFORM_VERSION="1.3.0"
        echo "Downloading Terraform version ${TERRAFORM_VERSION}..."
        curl -fsSL "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip" -o terraform.zip
        unzip terraform.zip
        sudo mv terraform /usr/local/bin/
        rm terraform.zip
        terraform version
      displayName: 'Install Terraform'
      workingDirectory: $(System.DefaultWorkingDirectory)/terraform-pipeline-task01

    # Azure CLI Login before Terraform Apply
    - task: AzureCLI@2
      displayName: 'Azure Login'
      inputs:
        azureSubscription: 'shomenniuk-connect'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az account show

    # Download the tfplan artifact from the Plan stage
    - download: current
      artifact: tfplan
      displayName: 'Download tfplan artifact'

    # Reinitialize Terraform with the same backend override
    - script: |
        terraform init  \
          -backend-config="storage_account_name=$(storageAccountName)"
      displayName: 'Terraform Init with Lockfile'
      workingDirectory: $(System.DefaultWorkingDirectory)/terraform-pipeline-task01

    # Apply the saved Terraform plan
    - script: |
        terraform apply -auto-approve $(Pipeline.Workspace)/tfplan/tfplan
      displayName: 'Terraform Apply'
      workingDirectory: $(System.DefaultWorkingDirectory)/terraform-pipeline-task01
